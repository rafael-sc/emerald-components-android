apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'maven'
apply plugin: 'jacoco'
apply plugin: 'com.github.kt3k.coveralls'

apply from: '../static-analysis/lint.gradle'
apply from: '../static-analysis/ktlint.gradle'
apply from: '../static-analysis/detekt.gradle'

check.dependsOn 'ktlint', 'detekt'

def deployKey = System.env.PACKAGECLOUD_TOKEN != null ? System.env.PACKAGECLOUD_TOKEN : localProp["packageCloudToken"]
def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', '**/*$*', 'android/**/*.*', '**/*Function*', '**/*_impl*']
def debugTree = fileTree(dir: "$project.buildDir/tmp/kotlin-classes/debug", excludes: fileFilter)
def mainSrc = "$project.projectDir/src/main/kotlin"
def version = '1.8.0'

android {
    compileSdkVersion sdk_version
    testOptions.unitTests.includeAndroidResources true

    defaultConfig {
        minSdkVersion 17
        targetSdkVersion sdk_version
        versionCode 1
        versionName version

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets {
        main.res.srcDirs += 'src/test/res'
    }

}

configurations {
    deployerJars
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    deployerJars "io.packagecloud.maven.wagon:maven-packagecloud-wagon:0.0.6"

    testImplementation "junit:junit:$junit_version"
    testImplementation "org.robolectric:robolectric:4.1"
    testImplementation "org.powermock:powermock-module-junit4:$powermock_version"
    testImplementation "org.powermock:powermock-module-junit4-rule:$powermock_version"
    testImplementation "org.powermock:powermock-classloading-xstream:$powermock_version"
    testImplementation "org.mockito:mockito-inline:$mockito_version"
    testImplementation 'androidx.test:core:1.1.0'

    androidTestImplementation "androidx.test.ext:junit:1.1.0"
    androidTestImplementation "androidx.test.espresso:espresso-core:$espresso_version"

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "androidx.recyclerview:recyclerview:$support_version"
    implementation "androidx.appcompat:appcompat:$support_version"
    implementation 'com.google.android.material:material:1.1.0-beta02'

    implementation 'androidx.constraintlayout:constraintlayout:2.0.0-alpha3'

    api 'com.github.prolificinteractive:material-calendarview:1.6.1'
    api "com.redmadrobot:inputmask:$inputmask_versoin"
}

repositories {
    mavenCentral()
}

jacoco {
    toolVersion = '0.8.0'
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}

uploadArchives {
    repositories.mavenDeployer {
        configuration = configurations.deployerJars
        repository(url: "packagecloud+https://packagecloud.io/Stone/emerald-components-android") {
            authentication(password: deployKey)
        }
        pom.version = version
        pom.artifactId = "emerald-components-android"
        pom.groupId = 'br.com.stone'
    }
}

coveralls {
    sourceDirs = files(subprojects.sourceSets.main.allSource.srcDirs).files.absolutePath
}

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest']) {

    reports {
        xml.enabled = true
        html.enabled = true
        csv.enabled = false
    }

    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree])
    executionData = fileTree(dir: project.buildDir, includes: [
            'jacoco/testDebugUnitTest.exec', 'outputs/code-coverage/connected/*coverage.ec'
    ])

}

task customJacocoTestCoverageVerification(type: JacocoCoverageVerification, dependsOn: 'jacocoTestReport') {

    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree])
    executionData = fileTree(dir: project.buildDir, includes: ['jacoco/testDebugUnitTest.exec'])

    violationRules {
        setFailOnViolation(false)

        rule {
            element = 'PACKAGE'

            limit {
                value = 'COVEREDRATIO'
                counter = 'BRANCH'
                minimum = 0.6
            }
        }
    }

}
